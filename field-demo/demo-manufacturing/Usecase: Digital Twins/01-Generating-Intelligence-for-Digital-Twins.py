# Databricks notebook source
# MAGIC %md
# MAGIC # Azure Databricks + Azure Digital Twins
# MAGIC 
# MAGIC ## What is a Digital Twin?
# MAGIC 
# MAGIC A Digital Twin is a virtual representation of a physical product (asset/equipment twin) or  process (process twin), used to understand and predict the physical counterpart’s performance characteristics
# MAGIC 
# MAGIC It is used throughout the product lifecycle to simulate, predict, and optimize the product and production system, before optimizing the physical assets or processes, continuously updated using real-world data.
# MAGIC 
# MAGIC Digital Twins drive advanced, value-adding use cases. Consider the following scenarios:
# MAGIC * A refinery’s crude distillation unit wants to shift fuel blends in one period and a different blend in the next period. Digital twins enable the company to simulate the changes and settings before they enact physical changes.
# MAGIC * A company wants to reconfigure a line in a plant. It costs $200,000 per hour for a line to be down. Digital twins enable the company to test various new configurations of the line virtually before taking the line down.
# MAGIC * An airplane engine manufacturer wants to determine when an engine needs to be serviced to ensure optimal performance and safety. They’re accountable to the airlines for on-time metrics, so any unplanned maintenance carries severe financial penalties. Digital twins are used to predict potential failure of components, and enable the maintenance crews to schedule maintenance.
# MAGIC 
# MAGIC 
# MAGIC ## Scenario - Digital Twins for EV Battery Manufacturing Plants  
# MAGIC 
# MAGIC In this demo, we’ll create an EV Battery Manufactoring plant using Azure Digital Twins, with data and insights generated by Databricks:
# MAGIC 
# MAGIC - Model a part of the manufacturing process using Azure Digital Twins
# MAGIC - Demonstrate Databricks’ ingestion capabilities to collect IOT data
# MAGIC - Leverage Databricks ML to showcase 2 common uses for digital twins in manufacturing:
# MAGIC   - **Predictive Maintenance**
# MAGIC   - **Root Cause Analysis & Troubleshooting**
# MAGIC   
# MAGIC ## Data flow
# MAGIC 
# MAGIC We'll be implementing the following data flow:
# MAGIC 
# MAGIC <img src="https://github.com/QuentinAmbard/databricks-demo/raw/main/manufacturing/digital-twin-azure/azure-digital-twin-flow-0.png" width="1000px" />
# MAGIC   
# MAGIC 
# MAGIC <!-- Collect usage data (view). Remove it to disable collection. View README for more details.  -->
# MAGIC <img width="1px" src="https://www.google-analytics.com/collect?v=1&gtm=GTM-NKQ8TT7&tid=UA-163989034-1&cid=555&aip=1&t=event&ec=field_demos&ea=display&dp=%2F42_field_demos%2Fmanufacturing%2Fdigital_twins%2Fnotebook_intro&dt=MANUFACTURING_DIGITAL_TWINS">
# MAGIC <!-- [metadata={"description":"Digital Twins introduction with Azure Digital Twins.",
# MAGIC  "authors":["pawarit.laosunthara@databricks.com"]}] -->

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ## Building our Digital Twin on Azure
# MAGIC 
# MAGIC Our battery plant has been modeled in [Azure Digital Twins Explorer](https://explorer.digitaltwins.azure.net/?tid=9f37a392-f0ae-4280-9796-f1864a10effc&eid=battery-plant-digital-twin.api.eus2.digitaltwins.azure.net).
# MAGIC 
# MAGIC 
# MAGIC <img src="https://github.com/QuentinAmbard/databricks-demo/raw/main/manufacturing/digital-twin-azure/azure-digital-twin-full.png" style="float: right" width="600px" />
# MAGIC 
# MAGIC As you can see, we have multiple plants/geographies (Dallas, Shanghai and Munich).  
# MAGIC Each plant has 1 to 3 production lines, each having multiple components sending sensor data.  
# MAGIC For more details on how to create this model, please open the [Azure Digital Twin Setup]($./_resources/01-setup-build-azure-digital-twin) notebook
# MAGIC 
# MAGIC <br style="clear:both"/>
# MAGIC 
# MAGIC ### Mixing step
# MAGIC 
# MAGIC In this demo, we'll focus on the MixingStep where our battery slurries are being mixed. 
# MAGIC 
# MAGIC <img src="https://github.com/QuentinAmbard/databricks-demo/raw/main/manufacturing/digital-twin-azure/azure-digital-twin-mixer.png" style="float: right" width="400px" />
# MAGIC 
# MAGIC Clicking on one of these mixers gives you details on what's going on in this specific step:
# MAGIC 
# MAGIC - Sensor information such as:
# MAGIC   - Rotation Speeds
# MAGIC   - Power Usage
# MAGIC   - Vibrations
# MAGIC - Health predictions based on analyzing vibration patterns using the Machine Learning model we recently deployed
# MAGIC 
# MAGIC 
# MAGIC 
# MAGIC ### Checking plant health
# MAGIC 
# MAGIC Try to run ```SELECT * FROM digitaltwins WHERE HealthPrediction != 'OK'```  
# MAGIC You'll see that we currently don't have any unhealthy plants.

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ### Enabling advanced analytics for Digital Twins with Azure Databricks
# MAGIC 
# MAGIC Azure Digital Twins provides us a great visual overview and representation of our system.  
# MAGIC However, more intelligent insights into the processes often require more advanced modelling capabilities. 
# MAGIC 
# MAGIC #### Desired Capabilities
# MAGIC 
# MAGIC Customers often want to apply their own **(programmatic) business logic** in order to achieve:
# MAGIC - custom transformations, aggregations
# MAGIC - simulations and predictions using arbitrary models (e.g. Machine Learning)
# MAGIC - virtual sensing (aka soft sensing)
# MAGIC 
# MAGIC Let's see how these advanced analytics capabilities can be implemented

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Predictive maintenance with Azure Databricks
# MAGIC 
# MAGIC If our Mixers aren't performing properly, our battery production can be severely impacted.
# MAGIC 
# MAGIC Let's explore how we can build a predictive model for [faulty equipment detection]($./02-Faulty-Equipment-Detection) and embed these insights directly into our Azure Digital Twins instance.

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Root Cause Analysis & Troubleshooting with DBSQL
# MAGIC 
# MAGIC 
# MAGIC Our quality team recently reported some unexpected issues with our latest batch of batteries.
# MAGIC 
# MAGIC Let's see how we can perform [root cause analysis]($./03-Root-Cause-Analysis) leveraging simple SQL queries and DBSQL dashboards.
